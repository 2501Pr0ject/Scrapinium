version: '3.8'

# Scrapinium v0.2.0 - Environnement de Développement
# Utilise SQLite et expose les ports pour le développement local

services:
  # Application principale Scrapinium
  scrapinium-app:
    build: .
    ports:
      - "8000:8000"  # API FastAPI avec interface web
    environment:
      # Configuration développement (voir .env.example pour toutes les options)
      - SCRAPINIUM_DEBUG=true
      - SCRAPINIUM_DATABASE_URL=sqlite:///./scrapinium.db
      - SCRAPINIUM_REDIS_URL=redis://redis:6379
      - SCRAPINIUM_OLLAMA_HOST=http://ollama:11434
      - SCRAPINIUM_OLLAMA_MODEL=llama3.1:8b
    volumes:
      - .:/app                    # Code source pour hot-reload
      - ./data:/app/data         # Données persistantes
      - ./logs:/app/logs         # Logs de l'application
    depends_on:
      - redis
      - ollama
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis pour optimisations v0.2.0
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"  # Exposé pour debug/monitoring
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # LLM local Ollama
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"  # API Ollama exposée
    volumes:
      - ollama_data:/root/.ollama  # Modèles persistants
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    # Télécharger automatiquement le modèle par défaut
    entrypoint: ["/bin/sh", "-c", "ollama serve & sleep 10 && ollama pull llama3.1:8b && wait"]

volumes:
  redis_data:    # Cache Redis persistant
  ollama_data:   # Modèles LLM persistants