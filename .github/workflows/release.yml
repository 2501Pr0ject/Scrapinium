name: Release Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type de version (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      pre_release:
        description: 'Pre-release?'
        required: false
        default: false
        type: boolean

jobs:
  # ===========================
  # PREPARE RELEASE
  # ===========================
  
  prepare-release:
    name: "üéØ Prepare Release"
    runs-on: ubuntu-latest
    
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version gitpython
        
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Get current version
      id: current_version
      run: |
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Bump version
      id: bump
      run: |
        bump2version ${{ github.event.inputs.version_type }} --current-version ${{ steps.current_version.outputs.current_version }}
        NEW_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Generate changelog
      id: changelog
      run: |
        python scripts/generate_changelog.py --version ${{ steps.bump.outputs.new_version }} > RELEASE_NOTES.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Update CHANGELOG.md
      run: |
        python scripts/update_changelog.py --version ${{ steps.bump.outputs.new_version }}
        
    - name: Commit version bump
      run: |
        git add .
        git commit -m "üîñ Bump version to ${{ steps.bump.outputs.new_version }}"
        git push origin main
        
    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: RELEASE_NOTES.md

  # ===========================
  # QUALITY GATE
  # ===========================
  
  quality-gate:
    name: "üîç Quality Gate"
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=src/scrapinium --cov-fail-under=80
        
    - name: Security scan
      run: |
        bandit -r src/ -f json -o security-report.json
        
    - name: Performance benchmark
      run: |
        python scripts/benchmark.py --output benchmark-${{ needs.prepare-release.outputs.new_version }}.json
        
    - name: Validate documentation
      run: |
        python scripts/validate_docs.py
        
    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports-${{ needs.prepare-release.outputs.new_version }}
        path: |
          security-report.json
          benchmark-*.json
          coverage.xml

  # ===========================
  # BUILD RELEASE ARTIFACTS
  # ===========================
  
  build-artifacts:
    name: "üì¶ Build Artifacts"
    runs-on: ubuntu-latest
    needs: [prepare-release, quality-gate]
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        file: ./Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.new_version }}
          ghcr.io/${{ github.repository }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Python package
      if: matrix.platform == 'linux/amd64'
      run: |
        python -m pip install --upgrade pip build
        python -m build
        
    - name: Upload Python package
      if: matrix.platform == 'linux/amd64'
      uses: actions/upload-artifact@v3
      with:
        name: python-package-${{ needs.prepare-release.outputs.new_version }}
        path: dist/

  # ===========================
  # CREATE GITHUB RELEASE
  # ===========================
  
  create-release:
    name: "üè∑Ô∏è Create GitHub Release"
    runs-on: ubuntu-latest
    needs: [prepare-release, quality-gate, build-artifacts]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release notes
      uses: actions/download-artifact@v3
      with:
        name: release-notes
        
    - name: Download Python package
      uses: actions/download-artifact@v3
      with:
        name: python-package-${{ needs.prepare-release.outputs.new_version }}
        path: dist/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.prepare-release.outputs.new_version }}
        name: "Scrapinium v${{ needs.prepare-release.outputs.new_version }}"
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ github.event.inputs.pre_release }}
        files: |
          dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===========================
  # PUBLISH TO PYPI
  # ===========================
  
  publish-pypi:
    name: "üì¶ Publish to PyPI"
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: ${{ !github.event.inputs.pre_release }}
    
    environment:
      name: pypi
      url: https://pypi.org/project/scrapinium/
      
    steps:
    - name: Download Python package
      uses: actions/download-artifact@v3
      with:
        name: python-package-${{ needs.prepare-release.outputs.new_version }}
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  # ===========================
  # UPDATE DOCUMENTATION
  # ===========================
  
  update-docs:
    name: "üìö Update Documentation"
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
        
    - name: Build documentation
      run: |
        mkdocs build
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        publish_branch: gh-pages
        commit_message: "üìö Update documentation for v${{ needs.prepare-release.outputs.new_version }}"

  # ===========================
  # NOTIFY STAKEHOLDERS
  # ===========================
  
  notify:
    name: "üì¢ Notify Stakeholders"
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release, publish-pypi, update-docs]
    if: always()
    
    steps:
    - name: Create release announcement
      run: |
        echo "üéâ Scrapinium v${{ needs.prepare-release.outputs.new_version }} Released!"
        echo ""
        echo "üîó Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.new_version }}"
        echo "üì¶ PyPI: https://pypi.org/project/scrapinium/${{ needs.prepare-release.outputs.new_version }}/"
        echo "üê≥ Docker: ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.new_version }}"
        echo "üìö Docs: https://${{ github.repository_owner }}.github.io/scrapinium/"
        
    - name: Update project status
      uses: actions/github-script@v6
      with:
        script: |
          const releaseNote = `üéâ **Scrapinium v${{ needs.prepare-release.outputs.new_version }}** has been released!
          
          **What's New:**
          ${{ needs.prepare-release.outputs.changelog }}
          
          **Downloads:**
          - üì¶ [PyPI Package](https://pypi.org/project/scrapinium/${{ needs.prepare-release.outputs.new_version }}/)
          - üê≥ [Docker Image](https://github.com/${{ github.repository }}/pkgs/container/scrapinium)
          - üìö [Documentation](https://${{ github.repository_owner }}.github.io/scrapinium/)
          
          **Highlights:**
          - ‚ö° Enhanced performance optimizations
          - üõ°Ô∏è Advanced security features
          - üìä Real-time monitoring dashboard
          - üîß Enterprise-grade architecture
          `;
          
          // Create issue for release tracking
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üéâ Release v${{ needs.prepare-release.outputs.new_version }} - Tracking Issue`,
            body: releaseNote,
            labels: ['release', 'announcement']
          });

  # ===========================
  # POST-RELEASE TASKS
  # ===========================
  
  post-release:
    name: "üîÑ Post-Release Tasks"
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Create next development branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Cr√©er une branche pour le prochain d√©veloppement
        NEXT_VERSION=$(python -c "
        import semver
        current = '${{ needs.prepare-release.outputs.new_version }}'
        next_version = semver.bump_minor(current)
        print(f'{next_version}-dev')
        ")
        
        git checkout -b develop-$NEXT_VERSION
        
        # Mettre √† jour la version de d√©veloppement
        sed -i "s/version = \"${{ needs.prepare-release.outputs.new_version }}\"/version = \"$NEXT_VERSION\"/" pyproject.toml
        
        git add pyproject.toml
        git commit -m "üöß Start development for v$NEXT_VERSION"
        git push origin develop-$NEXT_VERSION
        
    - name: Update project roadmap
      run: |
        echo "‚úÖ v${{ needs.prepare-release.outputs.new_version }} released" >> ROADMAP.md
        echo "üöß v$NEXT_VERSION in development" >> ROADMAP.md
        
    - name: Schedule security audit
      uses: actions/github-script@v6
      with:
        script: |
          // Programmer un audit de s√©curit√© post-release
          const issueBody = `## üõ°Ô∏è Post-Release Security Audit
          
          **Release:** v${{ needs.prepare-release.outputs.new_version }}
          **Due Date:** ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}
          
          ### Tasks:
          - [ ] Dependency vulnerability scan
          - [ ] Container security analysis
          - [ ] Penetration testing
          - [ ] Code security review
          - [ ] Compliance verification
          
          **Assigned:** Security Team
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üõ°Ô∏è Security Audit - v${{ needs.prepare-release.outputs.new_version }}`,
            body: issueBody,
            labels: ['security', 'audit', 'priority-high'],
            assignees: [] // Ajouter les membres de l'√©quipe s√©curit√©
          });

  # ===========================
  # ROLLBACK PLAN
  # ===========================
  
  create-rollback-plan:
    name: "üîÑ Create Rollback Plan"
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: always()
    
    steps:
    - name: Create rollback documentation
      run: |
        cat > ROLLBACK_PLAN_v${{ needs.prepare-release.outputs.new_version }}.md << 'EOF'
        # üîÑ Rollback Plan - Scrapinium v${{ needs.prepare-release.outputs.new_version }}
        
        ## Quick Rollback Commands
        
        ### Docker Deployment
        ```bash
        # Rollback to previous version
        docker pull ghcr.io/${{ github.repository }}:v${{ needs.prepare-release.outputs.previous_version }}
        docker stop scrapinium
        docker run -d --name scrapinium ghcr.io/${{ github.repository }}:v${{ needs.prepare-release.outputs.previous_version }}
        ```
        
        ### Kubernetes Deployment
        ```bash
        kubectl set image deployment/scrapinium scrapinium=ghcr.io/${{ github.repository }}:v${{ needs.prepare-release.outputs.previous_version }}
        kubectl rollout status deployment/scrapinium
        ```
        
        ### Database Migrations
        ```bash
        # If database migrations were applied, rollback with:
        python -m alembic downgrade -1
        ```
        
        ## Rollback Triggers
        - Critical security vulnerability discovered
        - Performance degradation > 50%
        - Data corruption detected
        - Service availability < 99%
        
        ## Contact Information
        - **On-call Engineer:** [Slack: #on-call]
        - **Release Manager:** [Email: releases@scrapinium.com]
        - **Emergency:** [Phone: +1-xxx-xxx-xxxx]
        
        ## Post-Rollback Actions
        1. Investigate root cause
        2. Create hotfix branch
        3. Deploy patch release
        4. Update monitoring alerts
        5. Conduct post-mortem
        EOF
        
    - name: Upload rollback plan
      uses: actions/upload-artifact@v3
      with:
        name: rollback-plan-v${{ needs.prepare-release.outputs.new_version }}
        path: ROLLBACK_PLAN_v${{ needs.prepare-release.outputs.new_version }}.md