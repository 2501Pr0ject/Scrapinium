name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "18"

jobs:
  # ===========================
  # QUALITY CHECKS
  # ===========================
  
  code-quality:
    name: "üîç Code Quality"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check with black
      run: |
        black --check --diff src/ tests/
        
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff src/ tests/
        
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
        
    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # ===========================
  # TESTS
  # ===========================
  
  unit-tests:
    name: "üß™ Unit Tests"
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-server postgresql-client
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        
    - name: Start Redis
      run: |
        sudo systemctl start redis-server
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src/scrapinium --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  integration-tests:
    name: "üîó Integration Tests"
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_scrapinium
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Install Playwright browsers
      run: |
        playwright install
        
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_scrapinium
        REDIS_URL: redis://localhost:6379/0
      run: |
        export DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_scrapinium
        export REDIS_URL=redis://localhost:6379/0
        python -m pytest tests/test_api_integration.py -v
        
    - name: Run security tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_scrapinium
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/test_security*.py -v

  performance-tests:
    name: "‚ö° Performance Tests"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        
    - name: Start Scrapinium server
      run: |
        python -m uvicorn src.scrapinium.api.app:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run performance benchmarks
      run: |
        python scripts/benchmark.py --concurrency 3 --output benchmark-results.json
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  # ===========================
  # SECURITY SCANS
  # ===========================
  
  security-scan:
    name: "üõ°Ô∏è Security Scan"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Semgrep security analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto
        
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Scrapinium'
        path: '.'
        format: 'JSON'
        out: 'dependency-check-report'
        
    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check-report
        path: dependency-check-report/

  # ===========================
  # DOCKER BUILD & TEST
  # ===========================
  
  docker-build:
    name: "üê≥ Docker Build & Test"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: scrapinium:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name scrapinium-test -p 8000:8000 scrapinium:test
        sleep 15
        curl -f http://localhost:8000/health || exit 1
        docker stop scrapinium-test
        
    - name: Run container security scan
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --format json --output docker-scan.json scrapinium:test
          
    - name: Upload container scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-security-scan
        path: docker-scan.json

  # ===========================
  # DOCUMENTATION
  # ===========================
  
  docs-build:
    name: "üìö Documentation Build"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
        
    - name: Build documentation
      run: |
        mkdocs build --strict
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/

  # ===========================
  # DEPLOYMENT
  # ===========================
  
  deploy-staging:
    name: "üöÄ Deploy to Staging"
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.scrapinium.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push staging image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:staging
          ghcr.io/${{ github.repository }}:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to staging
      run: |
        echo "üöÄ D√©ploiement vers staging..."
        # Logique de d√©ploiement (Kubernetes, Docker Swarm, etc.)
        echo "‚úÖ D√©ploiement staging termin√©"

  deploy-production:
    name: "üéØ Deploy to Production"
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan, docker-build]
    if: github.event_name == 'release'
    
    environment:
      name: production
      url: https://scrapinium.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to production
      run: |
        echo "üéØ D√©ploiement vers production..."
        # Logique de d√©ploiement production
        echo "‚úÖ D√©ploiement production termin√©"

  # ===========================
  # NOTIFICATIONS
  # ===========================
  
  notify:
    name: "üì¢ Notifications"
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' }}
      run: |
        echo "‚úÖ Pipeline completed successfully!"
        
    - name: Notify on failure
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "‚ùå Pipeline failed! Check the logs."
        
    - name: Create deployment status
      uses: actions/github-script@v6
      if: github.event_name == 'push'
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id || 0,
            state: status,
            description: `CI/CD Pipeline ${status}`,
            environment: 'ci'
          });

  # ===========================
  # CLEANUP
  # ===========================
  
  cleanup:
    name: "üßπ Cleanup"
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "üßπ Nettoyage des anciennes images..."
        # Logique de nettoyage (si n√©cessaire)
        echo "‚úÖ Nettoyage termin√©"